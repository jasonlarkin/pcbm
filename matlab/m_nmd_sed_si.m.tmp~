nmd=load('./nmd.mat');

%--------------------------------------------------------------------------
    iseed = AAAAA;
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
    ikslice = IKSLICE;
%-------------------------------------------------------------------------- 

SED.SED(1:nmd.NUM_KPTS,1:(nmd.NUM_TSTEPS/2),1:nmd.NUM_MODES) = 0.0;
    
for ifft = 1:nmd.NUM_FFTS  
%VElOCITIES
    str_read=...
        strcat(...
        nmd.str.main ,'dump_',int2str(iseed),'_',int2str(ifft),'.vel');
    fid=fopen(str_read);
    dummy = textscan(fid,'%f%f%f','Delimiter',' ','commentStyle', '--'); 
    fclose(fid);
%Store velocity data of all atoms: subtract off the last time step
    velx = zeros(nmd.x0.NUM_ATOMS,nmd.NUM_TSTEPS);
    vely = zeros(nmd.x0.NUM_ATOMS,nmd.NUM_TSTEPS);
    velz = zeros(nmd.x0.NUM_ATOMS,nmd.NUM_TSTEPS);
%--------------------------------------------------------------------------
tic  
%--------------------------------------------------------------------------
    for iatom = 1:nmd.x0.NUM_ATOMS  
        velx(iatom,1:nmd.NUM_TSTEPS) =...
            dummy{1}...
            (iatom:nmd.x0.NUM_ATOMS:(length(dummy{1}(:))-nmd.x0.NUM_ATOMS))*...
		nmd.constant.ang2m/nmd.constant.s2ps;
        vely(iatom,1:nmd.NUM_TSTEPS) =...
            dummy{2}...
            (iatom:nmd.x0.NUM_ATOMS:(length(dummy{1}(:))-nmd.x0.NUM_ATOMS))*...
		nmd.constant.ang2m/nmd.constant.s2ps;
        velz(iatom,1:nmd.NUM_TSTEPS) =...
            dummy{3}...
            (iatom:nmd.x0.NUM_ATOMS:(length(dummy{1}(:))-nmd.x0.NUM_ATOMS))*...
		nmd.constant.ang2m/nmd.constant.s2ps;;
    end
%--------------------------------------------------------------------------
toc
%--------------------------------------------------------------------------
%Remove dummy
    clear dummy  
%Set mass array
%     m = repmat(nmd.mass(:,1),1,nmd.NUM_TSTEPS);     
    m = nmd.x0.m;
%EIGENVECTORS
    eigenvec = nmd.eigvec;
%FREQUENCIES
    freq = nmd.freq;              
%Zero main SED FP: this gets averaged as you loop over the NUM_FFTS      
    Q = zeros(1,nmd.NUM_TSTEPS);
    QDOT = zeros(1,nmd.NUM_TSTEPS);
    
SED.SED(...
    size(nmd.kptlist(:,1:3,ikslice),1),...
    1:(nmd.NUM_TSTEPS/2),1:nmd.NUM_MODES) = 0.0;

%--------------------------------------------------------------------------
tic  
%--------------------------------------------------------------------------
    for ikpt = 1:size(nmd.kptlist(:,1:3,ikslice),1)
        for imode = 1:nmd.NUM_MODES
    
            spatial = 2*pi*1i*(...
    nmd.x0.x*( (nmd.kptlist(ikpt,1,ikslice))/(nmd.x0.alat*nmd.x0.Nx) ) +...
    nmd.x0.y*( (nmd.kptlist(ikpt,2,ikslice))/(nmd.x0.alat*nmd.x0.Ny) ) +...
    nmd.x0.z*( (nmd.kptlist(ikpt,3,ikslice))/(nmd.x0.alat*nmd.x0.Nz) ) );
    
    kindex = nmd.kpt_index(ikpt,ikslice);
            
            eigx = repmat(...
                conj(...
                eigenvec(...
                ((nmd.x0.NUM_ATOMS_UCELL*3)*(kindex-1)+1)... 
                :3:...
                ((nmd.x0.NUM_ATOMS_UCELL*3)*kindex),imode...
                )...
                ),nmd.x0.NUM_ATOMS_UCELL,1);
            
            eigy = repmat(... 
                conj(...
                eigenvec(...
                ((nmd.x0.NUM_ATOMS_UCELL*3)*(kindex-1)+2)... 
                :3:...
                ((nmd.x0.NUM_ATOMS_UCELL*3)*kindex),imode...
                )...
                ),nmd.x0.NUM_ATOMS_UCELL,1);
            
            eigz = repmat(...
                conj(...
                eigenvec(...
                ((nmd.x0.NUM_ATOMS_UCELL*3)*(kindex-1)+3)... 
                :3:...
                ((nmd.x0.NUM_ATOMS_UCELL*3)*kindex),imode...
                )...
                ),nmd.x0.NUM_UCELL_COPIES,1);

            QDOT = sum(...
                bsxfun(@times,...
                bsxfun(@times, velx, eigx) + ...
                bsxfun(@times, vely, eigy) + ...
                bsxfun(@times, velz, eigz) ...
                , exp(spatial).*(sqrt(m/nmd.x0.NUM_UCELL_COPIES)) )...
                , 1 );

            KEXCORR = xcorr(QDOT,'coeff');

            KEFFT = real(...
                fft(...
                KEXCORR(nmd.NUM_TSTEPS:nmd.NUM_TSTEPS*2-1))).^2 ... 
                + imag(...
                fft(...
                KEXCORR(nmd.NUM_TSTEPS:nmd.NUM_TSTEPS*2-1))).^2;
            
        SED.SED(ikpt,:,imode) =...
            SED.SED(ikpt,:,imode)+KEFFT(1:(nmd.NUM_TSTEPS/2)) ;
        end 
    end 
%--------------------------------------------------------------------------
toc 
%--------------------------------------------------------------------------
end %END ifft
    
%Average over FFTS
    SED.SED = SED.SED/nmd.NUM_FFTS;
%Define frequencies
    omega = (1:nmd.NUM_OMEGAS)*(nmd.w_max/nmd.NUM_OMEGAS);
%Output SED
    for ikpt = 1:size(nmd.kptlist(:,1:3,ikslice),1)
        str_write_single=...
            strcat(nmd.str.main,'nmd/SED_',...
            num2str(nmd.kptlist(ikpt,1,ikslice)),...
            num2str(nmd.kptlist(ikpt,2,ikslice)),...
            num2str(nmd.kptlist(ikpt,3,ikslice)),...
            '_',int2str(iseed),'.txt');
        output(1:length(omega),1) = omega;
        output(1:length(omega),2:(nmd.NUM_MODES+1)) = SED.SED(ikpt,:,:);
        dlmwrite(str_write_single,output,'delimiter',' ');
        clear output
    end %END ikpt    
%end %END iseed


