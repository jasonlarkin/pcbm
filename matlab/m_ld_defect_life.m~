function ALLOY =...
    m_ld_defect_life(...
    freq,eigvec,NUM_MODES,NUM_KPTS,...
    Nx,Ny,Nz,...
    alloy_conc,m1,m2,vm,...
    DW_SCALE,NUM_ITERATIONS)
%ALLOY =...
%    m_ld_defect_life(NMD,alloy_conc,m1,m2,vm,DW_SCALE,NUM_ITERATIONS)
%--------------------------------------------------------------------------

%re-sort eigvec and transpose freq
for ikpt = 1:NUM_KPTS
        eig(...
            (ikpt-1)*NUM_MODES+1:(ikpt)*NUM_MODES,...
            1:NUM_MODES)...
            =...
        eigvec( (NUM_MODES)*(ikpt-1)+1 ...
            :...
            ((NUM_MODES)*ikpt),   1:NUM_MODES   )';  
%         ALLOY.freq(...
%             (ikpt-1)*NMD.x0.NUM_MODES+1:(ikpt)*NMD.x0.NUM_MODES,1)...
%             =...
%             NMD.freq(ikpt,:)';  
end

[I J] = sort(freq);
freq(J(1:3)) = 0.0;

ALLOY.freq = freq;

ALLOY.life(1:size(eig,1),1:NUM_ITERATIONS) = 0.0;
%calculate coupling strength
g(1) =...
    (1-alloy_conc)* ((1 - (m1/vm) )^2) + (alloy_conc)* ((1 - (m2/vm) )^2);
%calculate average level spacing
freq_sorted = sort(ALLOY.freq);
ALLOY.dw_avg =...
    real(...
    mean(...
    freq_sorted(2:length(freq_sorted))...
    -...
    freq_sorted(1:length(freq_sorted)-1)));
%--------------------------------------------------------------------------
%pause
%--------------------------------------------------------------------------
for imode = 1:size(eig,1)
%find all e*(k'v',b) dot e(kv,b), sum over b
    SUMb =...
        g(1)*...
        abs(...
            sum(...
                bsxfun(...
                @times, conj(eig(:,:))  ,  eig(imode,:)...
                )...
            ,2)...
        ).^2;
%set self-term 0
    SUMb(imode) = 0;
%find lorentzian broadenings
delwij = ...
    ALLOY.freq - ALLOY.freq(imode);
%scale the mean level spacing DW_SCALE
lor =...
    (PEAK_HEIGHT/pi)*(ALLOY.dw_avg*DW_SCALE./...
    ( delwij.^2 + (ALLOY.dw_avg*DW_SCALE)^2 ) );
%evaluate Eq. ()
    ALLOY.life(imode,1) =...
        ( pi*(ALLOY.freq(imode)^2) ) / ( 2*Nx*Ny*Nz )*...
        sum(lor.*SUMb,1);
%convert 1/life to life
ALLOY.life(imode,1) = 1/ALLOY.life(imode,1);
end
%--------------------------------------------------------------------------
%pause
%--------------------------------------------------------------------------
end








%--------------------------------------------------------------------------
%debug tools
%--------------------------------------------------------------------------

%     if ALLOY.freq(imode)<20
%     plot(ALLOY.freq,lor.*SUMb,'.')
% %--------------------------------------------------------------------------
% pause
% %--------------------------------------------------------------------------
%     end


%--------------------------------------------------------------------------
%iteration
%--------------------------------------------------------------------------

% %re-iterate using calculated lifetimes above
% for iiter = 2:NUM_ITERATIONS
%     iiter
% for imode = 1:size(eig,1)
% %find all e*(k',v') dot e(k,v), sum over b
%     SUMb =...
%         g(1)*...
%         abs(...
%         sum(...
%         bsxfun(...
%         @times, eig(:,:)  ,  conj(eig(imode,:)) ),2) ...
%         ).^2 ;
% %set self-term 0
%     SUMb(imode) = 0;
% %find lorentzian broadenings
% delwij = ...
%     ALLOY.freq - ALLOY.freq(imode);
% ALLOY.dw =...
%     1./(2*ALLOY.life(:,iiter-1)) + 1./(2*ALLOY.life(imode,iiter-1));
% 
% lor =...
%     (1.0/pi)*(ALLOY.dw./( delwij.^2 + ALLOY.dw.^2 ) );
% % max(lor)
% % plot(ALLOY.freq,ALLOY.dw,'.',ALLOY.freq,ALLOY.dw_avg)
% %--------------------------------------------------------------------------
% %pause
% %--------------------------------------------------------------------------
% %evaluate Eq. ()
%     ALLOY.life(imode,iiter) =...
%         ( pi*(ALLOY.freq(imode)^2) ) / ( 2*NMD.Nx*NMD.Ny*NMD.Nz )*...
%         sum(lor.*SUMb,1);
% %convert linewidth to lifetime
% ALLOY.life(imode,iiter) = 1/ALLOY.life(imode,iiter);
% end
% loglog(ALLOY.freq,ALLOY.life(:,iiter),'.')
% %--------------------------------------------------------------------------
% pause
% %--------------------------------------------------------------------------
% % loglog(ALLOY.freq,ALLOY.dw_avg,'.')
% % %--------------------------------------------------------------------------
% % pause
% % %--------------------------------------------------------------------------
% end
